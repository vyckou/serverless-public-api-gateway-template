service: ${env:CONTEXT}

# enables sqs as DLQ for lambdas
# plugins:
#  - serverless-plugin-lambda-dead-letter

custom:
    context: ${env:CONTEXT}
    service: ${env:SERVICE}
    environment: ${env:ENVIRONMENT}
    aws_accountid: ${env:AWS_ACCOUNTID}
    deployment_bucket: ${env:SERVERLESS_DEPLOYMENT_BUCKET}
    lambda_name: ${env:CONTEXT}-${env:SERVICE}-${env:ENVIRONMENT}
    api_gateway_id: ${env:API_GATEWAY_ID}
    api_gateway_resourece_id: ${env:API_GATEWAY_RESOURCE_ID}


provider:
  name: aws
  runtime: python3.6
  region: eu-west-1
  stage: ${opt:stage, 'staging'}
  deploymentBucket:
    name: ${self:custom.deployment_bucket}
    serverSideEncryption: AES256
# lambda global configuration
  role: arn:aws:iam::${self:custom.aws_accountid}:role/context/${self:custom.context}-${self:custom.environment}    
  environment:
    globalvariableA: value
  tags:
    context: ${self:custom.context}
    stack: ${self:custom.service}
  #needs to be pre-created / same gateway must be shared between stacks , as diff stacks are diff stages within the same api gw
  apiGateway:
    restApiId: ${self:custom.api_gateway_id}  # REST API resource ID. Default is generated by the framework
    restApiRootResourceId: ${self:custom.api_gateway_resourece_id} # Root resource, represent as / path  

# tricky thing here , if we want to put the lambda per request type, as within single service we always were targetting single lambda.
# in case of multiple lambdas per different request type, we would end up with the multiple lambdas under single service :-\
# DISCUSSION REQUIRED WITHIN THE TEAM

functions:
    list:
      name: ${env:CONTEXT}-${env:SERVICE}-${env:ENVIRONMENT}-list
      handler: resources/lambda.handler
      memorySize: 128
      timeout: 10
      tags:
        service: ${self:custom.service}
      events:
        - http:
            path: /contacts
            method: get
            cors: false
    get:
      handler: resources/lambda.handler
      events:
        - http: get /contact/{id}
    add:
      handler: resources/lambda.handler
      name: ${env:CONTEXT}-${env:SERVICE}-${env:ENVIRONMENT}-add
      tags:
        service: ${self:custom.service}
      events:
        - http:
            path: /contact
            method: post
            cors: false
      update:
        name: ${env:CONTEXT}-${env:SERVICE}-${env:ENVIRONMENT}-update
        handler: resources/lambda.handler
        tags:
          service: ${self:custom.service}
        events:
          - http:
              path: /contact/{id}
              method: put
              cors: false
      delete:
        name: ${env:CONTEXT}-${env:SERVICE}-${env:ENVIRONMENT}-delete
        handler: resources/lambda.handler
        tags:
          service: ${self:custom.service}
        events:
          - http:
              path: /contact/{id}
              method: delete
              cors: false